
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016e  00800200  00000cb6  00000d4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  0080036e  0080036e  00000eb8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000f58  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001939  00000000  00000000  00001070  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000106a  00000000  00000000  000029a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000df0  00000000  00000000  00003a13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  00004804  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000079c  00000000  00000000  00004a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000076c  00000000  00000000  000051d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00005940  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	cc c2       	rjmp	.+1432   	; 0x60e <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 eb       	ldi	r30, 0xB6	; 182
  fc:	fc e0       	ldi	r31, 0x0C	; 12
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 36       	cpi	r26, 0x6E	; 110
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	ae e6       	ldi	r26, 0x6E	; 110
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a5 39       	cpi	r26, 0x95	; 149
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	53 d0       	rcall	.+166    	; 0x1c6 <main>
 120:	c8 c5       	rjmp	.+2960   	; 0xcb2 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <delay_1_micros>:
	...
	NOP
	NOP
	NOP
	NOP

	RET
 13c:	08 95       	ret

0000013e <delay_micros>:
; Uses registers:
;	R24				Input parameter data (X Âµs)
;==============================================================================
delay_micros:
	
	RCALL delay_1_micros
 13e:	f2 df       	rcall	.-28     	; 0x124 <delay_1_micros>
	DEC R24
 140:	8a 95       	dec	r24
	BRNE delay_micros
 142:	e9 f7       	brne	.-6      	; 0x13e <delay_micros>
	RET
 144:	08 95       	ret

00000146 <delay_ms>:
;					also input to 'delay_micros'.
;==============================================================================
delay_ms:


	MOV			R18,		R24			; Copy the value in R24 to R18
 146:	28 2f       	mov	r18, r24

00000148 <L1>:

L1:
	LDI			R24,		0xFA		; R24=250	
 148:	8a ef       	ldi	r24, 0xFA	; 250

	RCALL		delay_micros			; 250 micros delayed
 14a:	f9 df       	rcall	.-14     	; 0x13e <delay_micros>

	LDI			R24,		0xFA		; R24=250	
 14c:	8a ef       	ldi	r24, 0xFA	; 250

	RCALL		delay_micros			; 500 micros delayed
 14e:	f7 df       	rcall	.-18     	; 0x13e <delay_micros>

	LDI			R24,		0xFA		; R24=250	
 150:	8a ef       	ldi	r24, 0xFA	; 250

	RCALL		delay_micros			; 750 micros delayed
 152:	f5 df       	rcall	.-22     	; 0x13e <delay_micros>

	LDI			R24,		0xFA		; R24=250	
 154:	8a ef       	ldi	r24, 0xFA	; 250

	RCALL		delay_micros			; 1000 micros delayed = 1ms
 156:	f3 df       	rcall	.-26     	; 0x13e <delay_micros>

	DEC		R18
 158:	2a 95       	dec	r18

	BRNE	L1
 15a:	b1 f7       	brne	.-20     	; 0x148 <L1>

	RET
 15c:	08 95       	ret

0000015e <delay_1_s>:
;	R24				Used for storage and
;					also input to 'delay_micros'.
;==============================================================================
delay_1_s:

	LDI			R24,		0xFA		; R24=250	
 15e:	8a ef       	ldi	r24, 0xFA	; 250

	RCALL		delay_ms				; 250 ms delayed
 160:	f2 df       	rcall	.-28     	; 0x146 <delay_ms>

	LDI			R24,		0xFA		; R24=250	
 162:	8a ef       	ldi	r24, 0xFA	; 250

	RCALL		delay_ms				; 500 ms delayed
 164:	f0 df       	rcall	.-32     	; 0x146 <delay_ms>

	LDI			R24,		0xFA		; R24=250	
 166:	8a ef       	ldi	r24, 0xFA	; 250

	RCALL		delay_ms				; 750 ms delayed
 168:	ee df       	rcall	.-36     	; 0x146 <delay_ms>

	LDI			R24,		0xFA		; R24=250	
 16a:	8a ef       	ldi	r24, 0xFA	; 250

	RCALL		delay_ms				; 1000 ms delayed = 1s
 16c:	ec cf       	rjmp	.-40     	; 0x146 <delay_ms>

	RET
 16e:	08 95       	ret

00000170 <delay_s>:
; Uses registers:
;	R19				Input parameter data (X ms)
;==============================================================================

delay_s:
	MOV			R19,			R24
 170:	38 2f       	mov	r19, r24

00000172 <loop>:
loop:	
	RCALL		delay_1_s				; delay_1_s
 172:	f5 df       	rcall	.-22     	; 0x15e <delay_1_s>
	DEC			R19						; decrement counter
 174:	3a 95       	dec	r19
	BRNE		loop					; start over if not 0
 176:	e9 f7       	brne	.-6      	; 0x172 <loop>
	RET
 178:	08 95       	ret

0000017a <hmi_init>:
		str_to_uint16(numbers, length, p_int_nr);
	}
	// return the number of digits
	//*p_int_nr = key;
	return length;
}
 17a:	ac d1       	rcall	.+856    	; 0x4d4 <numkey_init>
 17c:	55 c1       	rjmp	.+682    	; 0x428 <lcd_init>
 17e:	08 95       	ret

00000180 <output_msg>:
 *	p_str2: pointer to first character of the string.
 *  delay_after_msg: number of seconds to wait after message is shown.
 */

void output_msg(char *p_str1, char *p_str2, uint8_t delay_after_msg)
{
 180:	ef 92       	push	r14
 182:	ff 92       	push	r15
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	7c 01       	movw	r14, r24
 18c:	8b 01       	movw	r16, r22
 18e:	c4 2f       	mov	r28, r20
	//lcd_set_cursor_mode(CURSOR_OFF);												finns?
			lcd_clear();
 190:	79 d1       	rcall	.+754    	; 0x484 <lcd_clear>
			lcd_set_cursor_pos(0, 0);
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	81 d1       	rcall	.+770    	; 0x49a <lcd_set_cursor_pos>
			SET_BIT(PORTB, 4);
 198:	85 b1       	in	r24, 0x05	; 5
 19a:	80 61       	ori	r24, 0x10	; 16
			lcd_write_str(p_str1);
 19c:	85 b9       	out	0x05, r24	; 5
 19e:	c7 01       	movw	r24, r14
			lcd_set_cursor_pos(1, 0);
 1a0:	8c d1       	rcall	.+792    	; 0x4ba <lcd_write_str>
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	79 d1       	rcall	.+754    	; 0x49a <lcd_set_cursor_pos>
			SET_BIT(PORTB, 4);
 1a8:	85 b1       	in	r24, 0x05	; 5
 1aa:	80 61       	ori	r24, 0x10	; 16
			lcd_write_str(p_str2);
 1ac:	85 b9       	out	0x05, r24	; 5
 1ae:	c8 01       	movw	r24, r16
		if(delay_after_msg > 0){
 1b0:	84 d1       	rcall	.+776    	; 0x4ba <lcd_write_str>
 1b2:	cc 23       	and	r28, r28
			delay_s(delay_after_msg);
 1b4:	11 f0       	breq	.+4      	; 0x1ba <output_msg+0x3a>
 1b6:	8c 2f       	mov	r24, r28
 1b8:	db df       	rcall	.-74     	; 0x170 <delay_s>
		}
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	ff 90       	pop	r15
 1c2:	ef 90       	pop	r14
 1c4:	08 95       	ret

000001c6 <main>:

int main(void)

{
	// initialize HMI (LCD and numeric keyboard)
	hmi_init();
 1c6:	d9 df       	rcall	.-78     	; 0x17a <hmi_init>
	lcd_clear();
 1c8:	5d d1       	rcall	.+698    	; 0x484 <lcd_clear>
	
	//initialize regulator
	regulator_init();
 1ca:	3e d2       	rcall	.+1148   	; 0x648 <regulator_init>

	key = NO_KEY;
 1cc:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <key>
	
	while (1) {		
		
		key = numkey_read();
 1d0:	9c d1       	rcall	.+824    	; 0x50a <numkey_read>
 1d2:	80 93 83 03 	sts	0x0383, r24	; 0x800383 <key>
		
		
			delay_ms(20);
 1d6:	84 e1       	ldi	r24, 0x14	; 20
 1d8:	b6 df       	rcall	.-148    	; 0x146 <delay_ms>
		
		if(current_state == MOTOR_OFF)
 1da:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <current_state>
 1de:	81 11       	cpse	r24, r1
 1e0:	29 c0       	rjmp	.+82     	; 0x234 <main+0x6e>
		{
			regulator = regulator_read();
 1e2:	5a d2       	rcall	.+1204   	; 0x698 <regulator_read>
 1e4:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <regulator>
 1e8:	8b e0       	ldi	r24, 0x0B	; 11
			sprintf(str, "MOTOR OFF!");
 1ea:	e0 e0       	ldi	r30, 0x00	; 0
 1ec:	f2 e0       	ldi	r31, 0x02	; 2
 1ee:	a4 e8       	ldi	r26, 0x84	; 132
 1f0:	b3 e0       	ldi	r27, 0x03	; 3
 1f2:	01 90       	ld	r0, Z+
 1f4:	0d 92       	st	X+, r0
 1f6:	8a 95       	dec	r24
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <main+0x2c>
		
			output_msg(str, "", 0);
 1fa:	40 e0       	ldi	r20, 0x00	; 0
 1fc:	6b e3       	ldi	r22, 0x3B	; 59
 1fe:	72 e0       	ldi	r23, 0x02	; 2
 200:	84 e8       	ldi	r24, 0x84	; 132
 202:	93 e0       	ldi	r25, 0x03	; 3
 204:	bd df       	rcall	.-134    	; 0x180 <output_msg>
 206:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <key>
		
			if((key == '1') && (regulator == 0))
 20a:	81 33       	cpi	r24, 0x31	; 49
 20c:	41 f4       	brne	.+16     	; 0x21e <main+0x58>
 20e:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <regulator>
 212:	91 11       	cpse	r25, r1
 214:	04 c0       	rjmp	.+8      	; 0x21e <main+0x58>
 216:	83 e0       	ldi	r24, 0x03	; 3
			{
				next_state = MOTOR_ON_BACKWARD;
 218:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <__data_end>
 21c:	aa c0       	rjmp	.+340    	; 0x372 <main+0x1ac>
 21e:	83 33       	cpi	r24, 0x33	; 51
			}
			else if((key == '3') && (regulator == 0))
 220:	09 f0       	breq	.+2      	; 0x224 <main+0x5e>
 222:	a7 c0       	rjmp	.+334    	; 0x372 <main+0x1ac>
 224:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <regulator>
 228:	81 11       	cpse	r24, r1
 22a:	a3 c0       	rjmp	.+326    	; 0x372 <main+0x1ac>
 22c:	81 e0       	ldi	r24, 0x01	; 1
			{
				next_state = MOTOR_ON_FORWARD;
 22e:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <__data_end>
 232:	9f c0       	rjmp	.+318    	; 0x372 <main+0x1ac>
 234:	81 30       	cpi	r24, 0x01	; 1
			}
		
		}
		else if(current_state == MOTOR_ON_FORWARD)
 236:	01 f5       	brne	.+64     	; 0x278 <main+0xb2>
 238:	89 e0       	ldi	r24, 0x09	; 9
		{
			sprintf(str, "FORWARD!");
 23a:	eb e0       	ldi	r30, 0x0B	; 11
 23c:	f2 e0       	ldi	r31, 0x02	; 2
 23e:	a4 e8       	ldi	r26, 0x84	; 132
 240:	b3 e0       	ldi	r27, 0x03	; 3
 242:	01 90       	ld	r0, Z+
 244:	0d 92       	st	X+, r0
 246:	8a 95       	dec	r24
 248:	e1 f7       	brne	.-8      	; 0x242 <main+0x7c>
			output_msg(str, "", 0);
 24a:	40 e0       	ldi	r20, 0x00	; 0
 24c:	6b e3       	ldi	r22, 0x3B	; 59
 24e:	72 e0       	ldi	r23, 0x02	; 2
 250:	84 e8       	ldi	r24, 0x84	; 132
 252:	93 e0       	ldi	r25, 0x03	; 3
 254:	95 df       	rcall	.-214    	; 0x180 <output_msg>
 256:	20 d2       	rcall	.+1088   	; 0x698 <regulator_read>
			regulator = regulator_read();
 258:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <regulator>
 25c:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <key>
			if(key == '0')
 260:	90 33       	cpi	r25, 0x30	; 48
 262:	19 f4       	brne	.+6      	; 0x26a <main+0xa4>
 264:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <__data_end>
			{
				next_state = MOTOR_OFF;
 268:	84 c0       	rjmp	.+264    	; 0x372 <main+0x1ac>
 26a:	88 23       	and	r24, r24
 26c:	09 f4       	brne	.+2      	; 0x270 <main+0xaa>
			}
			else if(regulator > 0)
 26e:	81 c0       	rjmp	.+258    	; 0x372 <main+0x1ac>
 270:	82 e0       	ldi	r24, 0x02	; 2
			{
				next_state = MOTOR_RUNNING_FORWARD;
 272:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <__data_end>
 276:	7d c0       	rjmp	.+250    	; 0x372 <main+0x1ac>
 278:	82 30       	cpi	r24, 0x02	; 2
			}
			
		}
		else if(current_state == MOTOR_RUNNING_FORWARD)
 27a:	61 f5       	brne	.+88     	; 0x2d4 <main+0x10e>
 27c:	0d d2       	rcall	.+1050   	; 0x698 <regulator_read>
		{
			regulator = regulator_read();
 27e:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <regulator>
 282:	9b e0       	ldi	r25, 0x0B	; 11
 284:	e4 e1       	ldi	r30, 0x14	; 20
			sprintf(str, "RUNNING FW");
 286:	f2 e0       	ldi	r31, 0x02	; 2
 288:	a4 e8       	ldi	r26, 0x84	; 132
 28a:	b3 e0       	ldi	r27, 0x03	; 3
 28c:	01 90       	ld	r0, Z+
 28e:	0d 92       	st	X+, r0
 290:	9a 95       	dec	r25
 292:	e1 f7       	brne	.-8      	; 0x28c <main+0xc6>
 294:	1f 92       	push	r1
 296:	8f 93       	push	r24
			sprintf(regulator_str, "MOTOR SPEED:  %u%%", regulator);
 298:	8f e1       	ldi	r24, 0x1F	; 31
 29a:	92 e0       	ldi	r25, 0x02	; 2
 29c:	9f 93       	push	r25
 29e:	8f 93       	push	r24
 2a0:	82 e7       	ldi	r24, 0x72	; 114
 2a2:	93 e0       	ldi	r25, 0x03	; 3
 2a4:	9f 93       	push	r25
 2a6:	8f 93       	push	r24
 2a8:	29 d2       	rcall	.+1106   	; 0x6fc <sprintf>
			output_msg(str, regulator_str, 0);
 2aa:	40 e0       	ldi	r20, 0x00	; 0
 2ac:	62 e7       	ldi	r22, 0x72	; 114
 2ae:	73 e0       	ldi	r23, 0x03	; 3
 2b0:	84 e8       	ldi	r24, 0x84	; 132
 2b2:	93 e0       	ldi	r25, 0x03	; 3
 2b4:	65 df       	rcall	.-310    	; 0x180 <output_msg>
 2b6:	29 d1       	rcall	.+594    	; 0x50a <numkey_read>
			key = numkey_read();
 2b8:	80 93 83 03 	sts	0x0383, r24	; 0x800383 <key>
 2bc:	0f 90       	pop	r0
 2be:	0f 90       	pop	r0
			if(key == '0')
 2c0:	0f 90       	pop	r0
 2c2:	0f 90       	pop	r0
 2c4:	0f 90       	pop	r0
 2c6:	0f 90       	pop	r0
 2c8:	80 33       	cpi	r24, 0x30	; 48
 2ca:	09 f0       	breq	.+2      	; 0x2ce <main+0x108>
 2cc:	52 c0       	rjmp	.+164    	; 0x372 <main+0x1ac>
 2ce:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <__data_end>
			{
				next_state = MOTOR_OFF;
 2d2:	4f c0       	rjmp	.+158    	; 0x372 <main+0x1ac>
 2d4:	83 30       	cpi	r24, 0x03	; 3
			}
		}
		else if(current_state == MOTOR_ON_BACKWARD)
 2d6:	09 f5       	brne	.+66     	; 0x31a <main+0x154>
 2d8:	df d1       	rcall	.+958    	; 0x698 <regulator_read>
		{
			regulator = regulator_read();
 2da:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <regulator>
 2de:	8a e0       	ldi	r24, 0x0A	; 10
 2e0:	e2 e3       	ldi	r30, 0x32	; 50
			sprintf(str, "BACKWARD!");
 2e2:	f2 e0       	ldi	r31, 0x02	; 2
 2e4:	a4 e8       	ldi	r26, 0x84	; 132
 2e6:	b3 e0       	ldi	r27, 0x03	; 3
 2e8:	01 90       	ld	r0, Z+
 2ea:	0d 92       	st	X+, r0
 2ec:	8a 95       	dec	r24
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <main+0x122>
 2f0:	40 e0       	ldi	r20, 0x00	; 0
		
			output_msg(str, "", 0);
 2f2:	6b e3       	ldi	r22, 0x3B	; 59
 2f4:	72 e0       	ldi	r23, 0x02	; 2
 2f6:	84 e8       	ldi	r24, 0x84	; 132
 2f8:	93 e0       	ldi	r25, 0x03	; 3
 2fa:	42 df       	rcall	.-380    	; 0x180 <output_msg>
 2fc:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <key>
			if(key == '0')
 300:	80 33       	cpi	r24, 0x30	; 48
 302:	19 f4       	brne	.+6      	; 0x30a <main+0x144>
 304:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <__data_end>
			{
				next_state = MOTOR_OFF;
 308:	34 c0       	rjmp	.+104    	; 0x372 <main+0x1ac>
 30a:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <regulator>
			}
			else if(regulator > 0)
 30e:	88 23       	and	r24, r24
 310:	81 f1       	breq	.+96     	; 0x372 <main+0x1ac>
 312:	84 e0       	ldi	r24, 0x04	; 4
			{
				next_state = MOTOR_RUNNING_BACKWARD;
 314:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <__data_end>
 318:	2c c0       	rjmp	.+88     	; 0x372 <main+0x1ac>
 31a:	84 30       	cpi	r24, 0x04	; 4
			}
		}
		else if(current_state == MOTOR_RUNNING_BACKWARD)
 31c:	51 f5       	brne	.+84     	; 0x372 <main+0x1ac>
 31e:	bc d1       	rcall	.+888    	; 0x698 <regulator_read>
		{
			regulator = regulator_read();
 320:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <regulator>
 324:	9b e0       	ldi	r25, 0x0B	; 11
 326:	ec e3       	ldi	r30, 0x3C	; 60
			sprintf(str, "RUNNING BW");
 328:	f2 e0       	ldi	r31, 0x02	; 2
 32a:	a4 e8       	ldi	r26, 0x84	; 132
 32c:	b3 e0       	ldi	r27, 0x03	; 3
 32e:	01 90       	ld	r0, Z+
 330:	0d 92       	st	X+, r0
 332:	9a 95       	dec	r25
 334:	e1 f7       	brne	.-8      	; 0x32e <main+0x168>
 336:	1f 92       	push	r1
			sprintf(regulator_str, "MOTOR SPEED:  %u%%", regulator);
 338:	8f 93       	push	r24
 33a:	8f e1       	ldi	r24, 0x1F	; 31
 33c:	92 e0       	ldi	r25, 0x02	; 2
 33e:	9f 93       	push	r25
 340:	8f 93       	push	r24
 342:	82 e7       	ldi	r24, 0x72	; 114
 344:	93 e0       	ldi	r25, 0x03	; 3
 346:	9f 93       	push	r25
 348:	8f 93       	push	r24
 34a:	d8 d1       	rcall	.+944    	; 0x6fc <sprintf>
			output_msg(str, regulator_str, 0);
 34c:	40 e0       	ldi	r20, 0x00	; 0
 34e:	62 e7       	ldi	r22, 0x72	; 114
 350:	73 e0       	ldi	r23, 0x03	; 3
 352:	84 e8       	ldi	r24, 0x84	; 132
 354:	93 e0       	ldi	r25, 0x03	; 3
 356:	14 df       	rcall	.-472    	; 0x180 <output_msg>
 358:	d8 d0       	rcall	.+432    	; 0x50a <numkey_read>
			key = numkey_read();
 35a:	80 93 83 03 	sts	0x0383, r24	; 0x800383 <key>
 35e:	0f 90       	pop	r0
			if(key == '0')
 360:	0f 90       	pop	r0
 362:	0f 90       	pop	r0
 364:	0f 90       	pop	r0
 366:	0f 90       	pop	r0
 368:	0f 90       	pop	r0
 36a:	80 33       	cpi	r24, 0x30	; 48
 36c:	11 f4       	brne	.+4      	; 0x372 <main+0x1ac>
 36e:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <__data_end>
			{
				next_state = MOTOR_OFF;
 372:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <__data_end>
			}
		}
		current_state = next_state;
 376:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <current_state>
 37a:	82 e3       	ldi	r24, 0x32	; 50
		delay_ms(50);
 37c:	e4 de       	rcall	.-568    	; 0x146 <delay_ms>
 37e:	28 cf       	rjmp	.-432    	; 0x1d0 <main+0xa>

00000380 <write_byte>:

/*
 * Write a byte of data to the LCD, starting with the most significant bit.
 */
static void write_byte(uint8_t data)
{
 380:	0f 93       	push	r16
 382:	1f 93       	push	r17
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	08 2f       	mov	r16, r24
	uint8_t i;
	// Set CS pin LOW
	CLR_BIT(PORTB, 6);
 38a:	85 b1       	in	r24, 0x05	; 5
 38c:	8f 7b       	andi	r24, 0xBF	; 191
 38e:	85 b9       	out	0x05, r24	; 5
	// Write byte
	for (i = 0; i < 8; i++) {
 390:	10 e0       	ldi	r17, 0x00	; 0
 392:	18 c0       	rjmp	.+48     	; 0x3c4 <write_byte+0x44>
		// Write MSB
		if (data & 0x80) {		// bit is 1?
 394:	00 23       	and	r16, r16
 396:	34 f4       	brge	.+12     	; 0x3a4 <write_byte+0x24>
			SET_BIT(PORTH, 6);	// write 1
 398:	e2 e0       	ldi	r30, 0x02	; 2
 39a:	f1 e0       	ldi	r31, 0x01	; 1
 39c:	80 81       	ld	r24, Z
 39e:	80 64       	ori	r24, 0x40	; 64
 3a0:	80 83       	st	Z, r24
 3a2:	05 c0       	rjmp	.+10     	; 0x3ae <write_byte+0x2e>
		} else {				// bit is 0?
			CLR_BIT(PORTH, 6);	// write 0
 3a4:	e2 e0       	ldi	r30, 0x02	; 2
 3a6:	f1 e0       	ldi	r31, 0x01	; 1
 3a8:	80 81       	ld	r24, Z
 3aa:	8f 7b       	andi	r24, 0xBF	; 191
 3ac:	80 83       	st	Z, r24
		}
		// shift out data to LCD
		SET_BIT(PORTH, 5);
 3ae:	c2 e0       	ldi	r28, 0x02	; 2
 3b0:	d1 e0       	ldi	r29, 0x01	; 1
 3b2:	88 81       	ld	r24, Y
 3b4:	80 62       	ori	r24, 0x20	; 32
 3b6:	88 83       	st	Y, r24
		delay_1_micros();
 3b8:	b5 de       	rcall	.-662    	; 0x124 <delay_1_micros>
		CLR_BIT(PORTH, 5);
 3ba:	88 81       	ld	r24, Y
 3bc:	8f 7d       	andi	r24, 0xDF	; 223
 3be:	88 83       	st	Y, r24
		// shift to next bit
		data = data << 1;
 3c0:	00 0f       	add	r16, r16
{
	uint8_t i;
	// Set CS pin LOW
	CLR_BIT(PORTB, 6);
	// Write byte
	for (i = 0; i < 8; i++) {
 3c2:	1f 5f       	subi	r17, 0xFF	; 255
 3c4:	18 30       	cpi	r17, 0x08	; 8
 3c6:	30 f3       	brcs	.-52     	; 0x394 <write_byte+0x14>
		CLR_BIT(PORTH, 5);
		// shift to next bit
		data = data << 1;
	}
	// Set CS pin HIGH
	SET_BIT(PORTB, 6);
 3c8:	85 b1       	in	r24, 0x05	; 5
 3ca:	80 64       	ori	r24, 0x40	; 64
 3cc:	85 b9       	out	0x05, r24	; 5
}
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	1f 91       	pop	r17
 3d4:	0f 91       	pop	r16
 3d6:	08 95       	ret

000003d8 <lcd_write>:
 * parameter:
 *	lcd_reg: register to communicate with (Command or Data register)
 *	data: 8-bit command or character
 */
void lcd_write(enum lcd_register lcd_reg, uint8_t data)
{
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
	uint8_t character;
	uint8_t i;
	
	if (lcd_reg == CMD) {
 3dc:	81 11       	cpse	r24, r1
 3de:	06 c0       	rjmp	.+12     	; 0x3ec <lcd_write+0x14>
		// Prepare to send a command
		CLR_BIT(PORTB, 4);
 3e0:	85 b1       	in	r24, 0x05	; 5
 3e2:	8f 7e       	andi	r24, 0xEF	; 239
 3e4:	85 b9       	out	0x05, r24	; 5
		// Write command
		write_byte(data);
 3e6:	86 2f       	mov	r24, r22
 3e8:	cb df       	rcall	.-106    	; 0x380 <write_byte>
 3ea:	1b c0       	rjmp	.+54     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	} else {
		// Prepare to send a character
		SET_BIT(PORTB, 4);
 3ec:	85 b1       	in	r24, 0x05	; 5
 3ee:	80 61       	ori	r24, 0x10	; 16
 3f0:	85 b9       	out	0x05, r24	; 5
		// write segment 1st to 5th segment of character
		character = data - ASCII_OFFSET;
 3f2:	d0 ee       	ldi	r29, 0xE0	; 224
 3f4:	d6 0f       	add	r29, r22
		for (i = 0; i < CHR_WIDTH; i++) {
 3f6:	c0 e0       	ldi	r28, 0x00	; 0
 3f8:	10 c0       	rjmp	.+32     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
			write_byte(lcd_char_table[character][i]);
 3fa:	2d 2f       	mov	r18, r29
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	f9 01       	movw	r30, r18
 400:	ee 0f       	add	r30, r30
 402:	ff 1f       	adc	r31, r31
 404:	ee 0f       	add	r30, r30
 406:	ff 1f       	adc	r31, r31
 408:	e2 0f       	add	r30, r18
 40a:	f3 1f       	adc	r31, r19
 40c:	e9 5b       	subi	r30, 0xB9	; 185
 40e:	fd 4f       	sbci	r31, 0xFD	; 253
 410:	ec 0f       	add	r30, r28
 412:	f1 1d       	adc	r31, r1
 414:	80 81       	ld	r24, Z
 416:	b4 df       	rcall	.-152    	; 0x380 <write_byte>
	} else {
		// Prepare to send a character
		SET_BIT(PORTB, 4);
		// write segment 1st to 5th segment of character
		character = data - ASCII_OFFSET;
		for (i = 0; i < CHR_WIDTH; i++) {
 418:	cf 5f       	subi	r28, 0xFF	; 255
 41a:	c5 30       	cpi	r28, 0x05	; 5
			write_byte(lcd_char_table[character][i]);
		}
		// write last segment of character (padding)
		write_byte(0x00);
 41c:	70 f3       	brcs	.-36     	; 0x3fa <lcd_write+0x22>
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	af df       	rcall	.-162    	; 0x380 <write_byte>
	}
}
 422:	df 91       	pop	r29
 424:	cf 91       	pop	r28
 426:	08 95       	ret

00000428 <lcd_init>:
 *	- configuration of LCD communication
 */
void lcd_init(void)
{
	// Configure I/O
	SET_BIT(DDRH, 5);		// Clock pin (output)
 428:	e1 e0       	ldi	r30, 0x01	; 1
 42a:	f1 e0       	ldi	r31, 0x01	; 1
 42c:	80 81       	ld	r24, Z
 42e:	80 62       	ori	r24, 0x20	; 32
 430:	80 83       	st	Z, r24
	SET_BIT(DDRH, 6);		// Data pin (output)
 432:	80 81       	ld	r24, Z
 434:	80 64       	ori	r24, 0x40	; 64
 436:	80 83       	st	Z, r24
	SET_BIT(DDRB, 4);		// Data/command pin (output)
 438:	84 b1       	in	r24, 0x04	; 4
 43a:	80 61       	ori	r24, 0x10	; 16
 43c:	84 b9       	out	0x04, r24	; 4
	SET_BIT(DDRB, 5);		// Reset pin (output)
 43e:	84 b1       	in	r24, 0x04	; 4
 440:	80 62       	ori	r24, 0x20	; 32
 442:	84 b9       	out	0x04, r24	; 4
	SET_BIT(DDRB, 6);		// CS/SS pin (output)
 444:	84 b1       	in	r24, 0x04	; 4
 446:	80 64       	ori	r24, 0x40	; 64
 448:	84 b9       	out	0x04, r24	; 4
	
	// Initialize LCD
	delay_ms(20);			// Let Vcc stabilize after power-up!
 44a:	84 e1       	ldi	r24, 0x14	; 20
 44c:	7c de       	rcall	.-776    	; 0x146 <delay_ms>
	SET_BIT(PORTB, 5);		// Set Reset pin HIGH
 44e:	85 b1       	in	r24, 0x05	; 5
 450:	80 62       	ori	r24, 0x20	; 32
 452:	85 b9       	out	0x05, r24	; 5
	delay_ms(10);			// Wait a little...
 454:	8a e0       	ldi	r24, 0x0A	; 10
 456:	77 de       	rcall	.-786    	; 0x146 <delay_ms>
	SET_BIT(PORTB, 6);		// Set CS pin HIGH (normal level)
 458:	85 b1       	in	r24, 0x05	; 5
 45a:	80 64       	ori	r24, 0x40	; 64
 45c:	85 b9       	out	0x05, r24	; 5
	lcd_write(CMD, 0x21);	// Function set (H=1)
 45e:	61 e2       	ldi	r22, 0x21	; 33
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	ba df       	rcall	.-140    	; 0x3d8 <lcd_write>
	lcd_write(CMD, 0x13);	// Set bias mode 1:48
 464:	63 e1       	ldi	r22, 0x13	; 19
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	b7 df       	rcall	.-146    	; 0x3d8 <lcd_write>
	lcd_write(CMD, 0xC0);	// Set Vop (contrast)
 46a:	60 ec       	ldi	r22, 0xC0	; 192
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	b4 df       	rcall	.-152    	; 0x3d8 <lcd_write>
	lcd_write(CMD, 0x04);	// Set temperature coefficient
 470:	64 e0       	ldi	r22, 0x04	; 4
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	b1 df       	rcall	.-158    	; 0x3d8 <lcd_write>
	lcd_write(CMD, 0x20);	// Function set (H=0)
 476:	60 e2       	ldi	r22, 0x20	; 32
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	ae df       	rcall	.-164    	; 0x3d8 <lcd_write>
 47c:	6c e0       	ldi	r22, 0x0C	; 12
	lcd_write(CMD, 0x0C);	// Set display control (normal mode)
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	ab cf       	rjmp	.-170    	; 0x3d8 <lcd_write>
 482:	08 95       	ret

00000484 <lcd_clear>:
 484:	cf 93       	push	r28
 486:	c0 e0       	ldi	r28, 0x00	; 0
 * Clears the LCD and moves the cursor to position row 0, column 0.
 */
void lcd_clear(void)
{
	char i;
	for (i=0; i<84; i++) lcd_write(CHR, ' ');
 488:	04 c0       	rjmp	.+8      	; 0x492 <lcd_clear+0xe>
 48a:	60 e2       	ldi	r22, 0x20	; 32
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	a4 df       	rcall	.-184    	; 0x3d8 <lcd_write>
 490:	cf 5f       	subi	r28, 0xFF	; 255
 492:	c4 35       	cpi	r28, 0x54	; 84
 494:	d0 f3       	brcs	.-12     	; 0x48a <lcd_clear+0x6>
}
 496:	cf 91       	pop	r28
 498:	08 95       	ret

0000049a <lcd_set_cursor_pos>:
 * parameter:
 *	row: 0-5  (row 1-6)
 *	col: 0-13 (col 1-14)
 */
void lcd_set_cursor_pos(uint8_t row, uint8_t col)
{
 49a:	cf 93       	push	r28
 49c:	c6 2f       	mov	r28, r22
	row = 0x40 | row;						// set row
 49e:	68 2f       	mov	r22, r24
 4a0:	60 64       	ori	r22, 0x40	; 64
	lcd_write(CMD, row);
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	99 df       	rcall	.-206    	; 0x3d8 <lcd_write>
	col = 0x80 | (col * CHR_TOTAL_WIDTH);	// set column
 4a6:	8c 2f       	mov	r24, r28
 4a8:	88 0f       	add	r24, r24
 4aa:	c8 0f       	add	r28, r24
 4ac:	6c 2f       	mov	r22, r28
 4ae:	66 0f       	add	r22, r22
 4b0:	60 68       	ori	r22, 0x80	; 128
	lcd_write(CMD, col);
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	91 df       	rcall	.-222    	; 0x3d8 <lcd_write>
}
 4b6:	cf 91       	pop	r28
 4b8:	08 95       	ret

000004ba <lcd_write_str>:
 *
 * parameter:
 *	p_str: pointer to the string's first character
 */
void lcd_write_str(char *p_str)
{
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
 4be:	ec 01       	movw	r28, r24
	for(char *c = p_str; *c != '\0'; c++)
 4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <lcd_write_str+0xe>
	{
		lcd_write(CHR, *c);
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	89 df       	rcall	.-238    	; 0x3d8 <lcd_write>
 * parameter:
 *	p_str: pointer to the string's first character
 */
void lcd_write_str(char *p_str)
{
	for(char *c = p_str; *c != '\0'; c++)
 4c6:	21 96       	adiw	r28, 0x01	; 1
 4c8:	68 81       	ld	r22, Y
 4ca:	61 11       	cpse	r22, r1
 4cc:	fa cf       	rjmp	.-12     	; 0x4c2 <lcd_write_str+0x8>
	{
		lcd_write(CHR, *c);
	}
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	08 95       	ret

000004d4 <numkey_init>:
 * This function configures the ports and pins to be used by the keyboard.
 */
void numkey_init(void)
{
	// Configure I/O
	SET_BIT(DDRG, 5);		// Column 0 (output)
 4d4:	83 b3       	in	r24, 0x13	; 19
 4d6:	80 62       	ori	r24, 0x20	; 32
 4d8:	83 bb       	out	0x13, r24	; 19
	SET_BIT(DDRE, 3);		// Column 1 (output)
 4da:	8d b1       	in	r24, 0x0d	; 13
 4dc:	88 60       	ori	r24, 0x08	; 8
 4de:	8d b9       	out	0x0d, r24	; 13
	SET_BIT(DDRH, 3);		// Column 2 (output)
 4e0:	e1 e0       	ldi	r30, 0x01	; 1
 4e2:	f1 e0       	ldi	r31, 0x01	; 1
 4e4:	80 81       	ld	r24, Z
 4e6:	88 60       	ori	r24, 0x08	; 8
 4e8:	80 83       	st	Z, r24
	SET_BIT(DDRH, 4);		// Column 3 (output)
 4ea:	80 81       	ld	r24, Z
 4ec:	80 61       	ori	r24, 0x10	; 16
 4ee:	80 83       	st	Z, r24
	CLR_BIT(DDRF, 5);		// Row 0 (input)
 4f0:	80 b3       	in	r24, 0x10	; 16
 4f2:	8f 7d       	andi	r24, 0xDF	; 223
 4f4:	80 bb       	out	0x10, r24	; 16
	CLR_BIT(DDRF, 4);		// Row 1 (input)
 4f6:	80 b3       	in	r24, 0x10	; 16
 4f8:	8f 7e       	andi	r24, 0xEF	; 239
 4fa:	80 bb       	out	0x10, r24	; 16
	CLR_BIT(DDRE, 4);		// Row 2 (input)
 4fc:	8d b1       	in	r24, 0x0d	; 13
 4fe:	8f 7e       	andi	r24, 0xEF	; 239
 500:	8d b9       	out	0x0d, r24	; 13
	CLR_BIT(DDRE, 5);		// Row 3 (input)
 502:	8d b1       	in	r24, 0x0d	; 13
 504:	8f 7d       	andi	r24, 0xDF	; 223
 506:	8d b9       	out	0x0d, r24	; 13
 508:	08 95       	ret

0000050a <numkey_read>:
 *	If a key is pressed, then a character that represents the key is returned.
 *	Otherwise, a NO_KEY character is returned!
 */
char numkey_read(void)
{
	SET_BIT(PORTG, 5);			// Set column 0
 50a:	84 b3       	in	r24, 0x14	; 20
 50c:	80 62       	ori	r24, 0x20	; 32
 50e:	84 bb       	out	0x14, r24	; 20
	CLR_BIT(PORTE, 3);			// Clear column 1
 510:	8e b1       	in	r24, 0x0e	; 14
 512:	87 7f       	andi	r24, 0xF7	; 247
 514:	8e b9       	out	0x0e, r24	; 14
	CLR_BIT(PORTH, 3);			// Clear column 2
 516:	e2 e0       	ldi	r30, 0x02	; 2
 518:	f1 e0       	ldi	r31, 0x01	; 1
 51a:	80 81       	ld	r24, Z
 51c:	87 7f       	andi	r24, 0xF7	; 247
 51e:	80 83       	st	Z, r24
	CLR_BIT(PORTH, 4);			// Clear column 3
 520:	80 81       	ld	r24, Z
 522:	8f 7e       	andi	r24, 0xEF	; 239
 524:	80 83       	st	Z, r24
	delay_ms(1);
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	0e de       	rcall	.-996    	; 0x146 <delay_ms>
	if (PINF & 0x20) {			// Row 0?
 52a:	7d 99       	sbic	0x0f, 5	; 15
 52c:	50 c0       	rjmp	.+160    	; 0x5ce <numkey_read+0xc4>
		return key_map[0];
	} else if (PINF & 0x10) {	// Row 1?
 52e:	7c 99       	sbic	0x0f, 4	; 15
 530:	50 c0       	rjmp	.+160    	; 0x5d2 <numkey_read+0xc8>
		return key_map[1];
	} else if (PINE & 0x10) {	// Row 2?
 532:	64 99       	sbic	0x0c, 4	; 12
 534:	50 c0       	rjmp	.+160    	; 0x5d6 <numkey_read+0xcc>
		return key_map[2];
	} else if (PINE & 0x20) {	// Row 3?
 536:	65 99       	sbic	0x0c, 5	; 12
 538:	50 c0       	rjmp	.+160    	; 0x5da <numkey_read+0xd0>
		return key_map[3];
	}
	
	CLR_BIT(PORTG, 5);			// Clear column 0
 53a:	84 b3       	in	r24, 0x14	; 20
 53c:	8f 7d       	andi	r24, 0xDF	; 223
 53e:	84 bb       	out	0x14, r24	; 20
	SET_BIT(PORTE, 3);			// Set column 1
 540:	8e b1       	in	r24, 0x0e	; 14
 542:	88 60       	ori	r24, 0x08	; 8
 544:	8e b9       	out	0x0e, r24	; 14
	CLR_BIT(PORTH, 3);			// Clear column 2
 546:	e2 e0       	ldi	r30, 0x02	; 2
 548:	f1 e0       	ldi	r31, 0x01	; 1
 54a:	80 81       	ld	r24, Z
 54c:	87 7f       	andi	r24, 0xF7	; 247
 54e:	80 83       	st	Z, r24
	CLR_BIT(PORTH, 4);			// Clear column 3
 550:	80 81       	ld	r24, Z
 552:	8f 7e       	andi	r24, 0xEF	; 239
 554:	80 83       	st	Z, r24
	delay_ms(1);
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	f6 dd       	rcall	.-1044   	; 0x146 <delay_ms>
	if (PINF & 0x20) {			// Row 0?
 55a:	7d 99       	sbic	0x0f, 5	; 15
 55c:	40 c0       	rjmp	.+128    	; 0x5de <numkey_read+0xd4>
		return key_map[4];
	} else if (PINF & 0x10) {	// Row 1?
 55e:	7c 99       	sbic	0x0f, 4	; 15
 560:	40 c0       	rjmp	.+128    	; 0x5e2 <numkey_read+0xd8>
		return key_map[5];
	} else if (PINE & 0x10) {	// Row 2?
 562:	64 99       	sbic	0x0c, 4	; 12
 564:	40 c0       	rjmp	.+128    	; 0x5e6 <numkey_read+0xdc>
		return key_map[6];
	} else if (PINE & 0x20) {	// Row 3?
 566:	65 99       	sbic	0x0c, 5	; 12
 568:	40 c0       	rjmp	.+128    	; 0x5ea <numkey_read+0xe0>
		return key_map[7];
	}
	
	CLR_BIT(PORTG, 5);			// Clear column 0
 56a:	84 b3       	in	r24, 0x14	; 20
 56c:	8f 7d       	andi	r24, 0xDF	; 223
 56e:	84 bb       	out	0x14, r24	; 20
	CLR_BIT(PORTE, 3);			// Set column 1
 570:	8e b1       	in	r24, 0x0e	; 14
 572:	87 7f       	andi	r24, 0xF7	; 247
 574:	8e b9       	out	0x0e, r24	; 14
	SET_BIT(PORTH, 3);			// Clear column 2
 576:	e2 e0       	ldi	r30, 0x02	; 2
 578:	f1 e0       	ldi	r31, 0x01	; 1
 57a:	80 81       	ld	r24, Z
 57c:	88 60       	ori	r24, 0x08	; 8
 57e:	80 83       	st	Z, r24
	CLR_BIT(PORTH, 4);			// Clear column 3
 580:	80 81       	ld	r24, Z
 582:	8f 7e       	andi	r24, 0xEF	; 239
	delay_ms(1);
 584:	80 83       	st	Z, r24
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	de dd       	rcall	.-1092   	; 0x146 <delay_ms>
	if (PINF & 0x20) {			// Row 0?
 58a:	7d 99       	sbic	0x0f, 5	; 15
 58c:	30 c0       	rjmp	.+96     	; 0x5ee <numkey_read+0xe4>
		return key_map[8];
		} else if (PINF & 0x10) {	// Row 1?
 58e:	7c 99       	sbic	0x0f, 4	; 15
 590:	30 c0       	rjmp	.+96     	; 0x5f2 <numkey_read+0xe8>
		return key_map[9];
		} else if (PINE & 0x10) {	// Row 2?
 592:	64 99       	sbic	0x0c, 4	; 12
 594:	30 c0       	rjmp	.+96     	; 0x5f6 <numkey_read+0xec>
		return key_map[10];
		} else if (PINE & 0x20) {	// Row 3?
 596:	65 99       	sbic	0x0c, 5	; 12
 598:	30 c0       	rjmp	.+96     	; 0x5fa <numkey_read+0xf0>
		return key_map[11];
	}
	
	CLR_BIT(PORTG, 5);			// Clear column 0
 59a:	84 b3       	in	r24, 0x14	; 20
 59c:	8f 7d       	andi	r24, 0xDF	; 223
 59e:	84 bb       	out	0x14, r24	; 20
	CLR_BIT(PORTE, 3);			// Set column 1
 5a0:	8e b1       	in	r24, 0x0e	; 14
 5a2:	87 7f       	andi	r24, 0xF7	; 247
 5a4:	8e b9       	out	0x0e, r24	; 14
	CLR_BIT(PORTH, 3);			// Clear column 2
 5a6:	e2 e0       	ldi	r30, 0x02	; 2
 5a8:	f1 e0       	ldi	r31, 0x01	; 1
 5aa:	80 81       	ld	r24, Z
 5ac:	87 7f       	andi	r24, 0xF7	; 247
 5ae:	80 83       	st	Z, r24
	SET_BIT(PORTH, 4);			// Clear column 3
 5b0:	80 81       	ld	r24, Z
 5b2:	80 61       	ori	r24, 0x10	; 16
	delay_ms(1);
 5b4:	80 83       	st	Z, r24
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	c6 dd       	rcall	.-1140   	; 0x146 <delay_ms>
	if (PINF & 0x20) {			// Row 0?
 5ba:	7d 99       	sbic	0x0f, 5	; 15
 5bc:	20 c0       	rjmp	.+64     	; 0x5fe <numkey_read+0xf4>
		return key_map[12];
		} else if (PINF & 0x10) {	// Row 1?
 5be:	7c 99       	sbic	0x0f, 4	; 15
 5c0:	20 c0       	rjmp	.+64     	; 0x602 <numkey_read+0xf8>
		return key_map[13];
		} else if (PINE & 0x10) {	// Row 2?
 5c2:	64 99       	sbic	0x0c, 4	; 12
 5c4:	20 c0       	rjmp	.+64     	; 0x606 <numkey_read+0xfc>
		return key_map[14];
		} else if (PINE & 0x20) {	// Row 3?
 5c6:	65 9b       	sbis	0x0c, 5	; 12
 5c8:	20 c0       	rjmp	.+64     	; 0x60a <numkey_read+0x100>
		return key_map[15];
 5ca:	84 e4       	ldi	r24, 0x44	; 68
 5cc:	08 95       	ret
	CLR_BIT(PORTE, 3);			// Clear column 1
	CLR_BIT(PORTH, 3);			// Clear column 2
	CLR_BIT(PORTH, 4);			// Clear column 3
	delay_ms(1);
	if (PINF & 0x20) {			// Row 0?
		return key_map[0];
 5ce:	81 e3       	ldi	r24, 0x31	; 49
 5d0:	08 95       	ret
	} else if (PINF & 0x10) {	// Row 1?
		return key_map[1];
 5d2:	84 e3       	ldi	r24, 0x34	; 52
 5d4:	08 95       	ret
	} else if (PINE & 0x10) {	// Row 2?
		return key_map[2];
 5d6:	87 e3       	ldi	r24, 0x37	; 55
 5d8:	08 95       	ret
	} else if (PINE & 0x20) {	// Row 3?
		return key_map[3];
 5da:	8a e2       	ldi	r24, 0x2A	; 42
 5dc:	08 95       	ret
	SET_BIT(PORTE, 3);			// Set column 1
	CLR_BIT(PORTH, 3);			// Clear column 2
	CLR_BIT(PORTH, 4);			// Clear column 3
	delay_ms(1);
	if (PINF & 0x20) {			// Row 0?
		return key_map[4];
 5de:	82 e3       	ldi	r24, 0x32	; 50
 5e0:	08 95       	ret
	} else if (PINF & 0x10) {	// Row 1?
		return key_map[5];
 5e2:	85 e3       	ldi	r24, 0x35	; 53
 5e4:	08 95       	ret
	} else if (PINE & 0x10) {	// Row 2?
		return key_map[6];
 5e6:	88 e3       	ldi	r24, 0x38	; 56
 5e8:	08 95       	ret
	} else if (PINE & 0x20) {	// Row 3?
		return key_map[7];
 5ea:	80 e3       	ldi	r24, 0x30	; 48
 5ec:	08 95       	ret
	CLR_BIT(PORTE, 3);			// Set column 1
	SET_BIT(PORTH, 3);			// Clear column 2
	CLR_BIT(PORTH, 4);			// Clear column 3
	delay_ms(1);
	if (PINF & 0x20) {			// Row 0?
		return key_map[8];
 5ee:	83 e3       	ldi	r24, 0x33	; 51
 5f0:	08 95       	ret
		} else if (PINF & 0x10) {	// Row 1?
		return key_map[9];
 5f2:	86 e3       	ldi	r24, 0x36	; 54
 5f4:	08 95       	ret
		} else if (PINE & 0x10) {	// Row 2?
		return key_map[10];
 5f6:	89 e3       	ldi	r24, 0x39	; 57
 5f8:	08 95       	ret
		} else if (PINE & 0x20) {	// Row 3?
		return key_map[11];
 5fa:	83 e2       	ldi	r24, 0x23	; 35
 5fc:	08 95       	ret
	CLR_BIT(PORTE, 3);			// Set column 1
	CLR_BIT(PORTH, 3);			// Clear column 2
	SET_BIT(PORTH, 4);			// Clear column 3
	delay_ms(1);
	if (PINF & 0x20) {			// Row 0?
		return key_map[12];
 5fe:	81 e4       	ldi	r24, 0x41	; 65
 600:	08 95       	ret
		} else if (PINF & 0x10) {	// Row 1?
		return key_map[13];
 602:	82 e4       	ldi	r24, 0x42	; 66
 604:	08 95       	ret
		} else if (PINE & 0x10) {	// Row 2?
		return key_map[14];
 606:	83 e4       	ldi	r24, 0x43	; 67
 608:	08 95       	ret
		} else if (PINE & 0x20) {	// Row 3?
		return key_map[15];
	}
	
	// no key was pressed!
	return NO_KEY;
 60a:	80 e0       	ldi	r24, 0x00	; 0
}
 60c:	08 95       	ret

0000060e <__vector_29>:
/*
 * Interrupt Service Routine for the ADC.
 * The ISR will execute when a A/D conversion is complete.
 */
ISR(ADC_vect)
{
 60e:	1f 92       	push	r1
 610:	0f 92       	push	r0
 612:	0f b6       	in	r0, 0x3f	; 63
 614:	0f 92       	push	r0
 616:	11 24       	eor	r1, r1
 618:	0b b6       	in	r0, 0x3b	; 59
 61a:	0f 92       	push	r0
 61c:	8f 93       	push	r24
 61e:	ef 93       	push	r30
 620:	ff 93       	push	r31
	adc = ADCH;
 622:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 626:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <adc>
	ADCSRA |= (1<<ADSC);
 62a:	ea e7       	ldi	r30, 0x7A	; 122
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	80 81       	ld	r24, Z
 630:	80 64       	ori	r24, 0x40	; 64
 632:	80 83       	st	Z, r24
	
}
 634:	ff 91       	pop	r31
 636:	ef 91       	pop	r30
 638:	8f 91       	pop	r24
 63a:	0f 90       	pop	r0
 63c:	0b be       	out	0x3b, r0	; 59
 63e:	0f 90       	pop	r0
 640:	0f be       	out	0x3f, r0	; 63
 642:	0f 90       	pop	r0
 644:	1f 90       	pop	r1
 646:	18 95       	reti

00000648 <regulator_init>:
 * ADC Resolution is 8-bit.
 */
void regulator_init(void)
{		
	// init A/D conversion
	ADMUX	|= (1<<REFS0);				// set reference voltage (internal 5V) 
 648:	ec e7       	ldi	r30, 0x7C	; 124
 64a:	f0 e0       	ldi	r31, 0x00	; 0
 64c:	80 81       	ld	r24, Z
 64e:	80 64       	ori	r24, 0x40	; 64
 650:	80 83       	st	Z, r24
	ADMUX	|= 0b00000111;				// select Single Ended Input for ADC15 
 652:	80 81       	ld	r24, Z
 654:	87 60       	ori	r24, 0x07	; 7
 656:	80 83       	st	Z, r24
	ADCSRB	|= (1<<3);					// ADC15 needs selection in a second place  (mux5)
 658:	ab e7       	ldi	r26, 0x7B	; 123
 65a:	b0 e0       	ldi	r27, 0x00	; 0
 65c:	8c 91       	ld	r24, X
 65e:	88 60       	ori	r24, 0x08	; 8
 660:	8c 93       	st	X, r24
	ADMUX	|= (1 << ADLAR);			// left adjustment of ADC value 
 662:	80 81       	ld	r24, Z
 664:	80 62       	ori	r24, 0x20	; 32
 666:	80 83       	st	Z, r24
	
	ADCSRA |= (0b00000111);	 			// prescaler 128 
 668:	ea e7       	ldi	r30, 0x7A	; 122
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	80 81       	ld	r24, Z
 66e:	87 60       	ori	r24, 0x07	; 7
 670:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE);				// enable Auto Trigger 
 672:	80 81       	ld	r24, Z
 674:	80 62       	ori	r24, 0x20	; 32
 676:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);				// enable Interrupt 
 678:	80 81       	ld	r24, Z
 67a:	88 60       	ori	r24, 0x08	; 8
 67c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);				// enable ADC 
 67e:	80 81       	ld	r24, Z
 680:	80 68       	ori	r24, 0x80	; 128
 682:	80 83       	st	Z, r24

	// disable digital input on ADC15
	DIDR2 |= (1 << 7);					 //0b10000000;
 684:	ad e7       	ldi	r26, 0x7D	; 125
 686:	b0 e0       	ldi	r27, 0x00	; 0
 688:	8c 91       	ld	r24, X
 68a:	80 68       	ori	r24, 0x80	; 128
 68c:	8c 93       	st	X, r24
	
	
	// disable USB controller (to make interrupts possible)
	//USBCON = 0;
	// enable global interrupts
	sei();
 68e:	78 94       	sei

	// start conversion
	ADCSRA |= (1<<ADSC);
 690:	80 81       	ld	r24, Z
 692:	80 64       	ori	r24, 0x40	; 64
 694:	80 83       	st	Z, r24
 696:	08 95       	ret

00000698 <regulator_read>:
 * therefore the maximum ADC value can't be 255.
 * If this isn't adjusted ~87-90% will be the output of this function.
 */
uint8_t regulator_read(void)
{
	uint8_t percentage = (adc * 100 / 255);
 698:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <adc>
 69c:	24 e6       	ldi	r18, 0x64	; 100
 69e:	82 9f       	mul	r24, r18
 6a0:	c0 01       	movw	r24, r0
 6a2:	11 24       	eor	r1, r1
 6a4:	6f ef       	ldi	r22, 0xFF	; 255
 6a6:	70 e0       	ldi	r23, 0x00	; 0
 6a8:	02 d0       	rcall	.+4      	; 0x6ae <__divmodhi4>
 6aa:	86 2f       	mov	r24, r22
	return percentage;
 6ac:	08 95       	ret

000006ae <__divmodhi4>:
 6ae:	97 fb       	bst	r25, 7
 6b0:	07 2e       	mov	r0, r23
 6b2:	16 f4       	brtc	.+4      	; 0x6b8 <__divmodhi4+0xa>
 6b4:	00 94       	com	r0
 6b6:	06 d0       	rcall	.+12     	; 0x6c4 <__divmodhi4_neg1>
 6b8:	77 fd       	sbrc	r23, 7
 6ba:	08 d0       	rcall	.+16     	; 0x6cc <__divmodhi4_neg2>
 6bc:	0b d0       	rcall	.+22     	; 0x6d4 <__udivmodhi4>
 6be:	07 fc       	sbrc	r0, 7
 6c0:	05 d0       	rcall	.+10     	; 0x6cc <__divmodhi4_neg2>
 6c2:	3e f4       	brtc	.+14     	; 0x6d2 <__divmodhi4_exit>

000006c4 <__divmodhi4_neg1>:
 6c4:	90 95       	com	r25
 6c6:	81 95       	neg	r24
 6c8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ca:	08 95       	ret

000006cc <__divmodhi4_neg2>:
 6cc:	70 95       	com	r23
 6ce:	61 95       	neg	r22
 6d0:	7f 4f       	sbci	r23, 0xFF	; 255

000006d2 <__divmodhi4_exit>:
 6d2:	08 95       	ret

000006d4 <__udivmodhi4>:
 6d4:	aa 1b       	sub	r26, r26
 6d6:	bb 1b       	sub	r27, r27
 6d8:	51 e1       	ldi	r21, 0x11	; 17
 6da:	07 c0       	rjmp	.+14     	; 0x6ea <__udivmodhi4_ep>

000006dc <__udivmodhi4_loop>:
 6dc:	aa 1f       	adc	r26, r26
 6de:	bb 1f       	adc	r27, r27
 6e0:	a6 17       	cp	r26, r22
 6e2:	b7 07       	cpc	r27, r23
 6e4:	10 f0       	brcs	.+4      	; 0x6ea <__udivmodhi4_ep>
 6e6:	a6 1b       	sub	r26, r22
 6e8:	b7 0b       	sbc	r27, r23

000006ea <__udivmodhi4_ep>:
 6ea:	88 1f       	adc	r24, r24
 6ec:	99 1f       	adc	r25, r25
 6ee:	5a 95       	dec	r21
 6f0:	a9 f7       	brne	.-22     	; 0x6dc <__udivmodhi4_loop>
 6f2:	80 95       	com	r24
 6f4:	90 95       	com	r25
 6f6:	bc 01       	movw	r22, r24
 6f8:	cd 01       	movw	r24, r26
 6fa:	08 95       	ret

000006fc <sprintf>:
 6fc:	0f 93       	push	r16
 6fe:	1f 93       	push	r17
 700:	cf 93       	push	r28
 702:	df 93       	push	r29
 704:	cd b7       	in	r28, 0x3d	; 61
 706:	de b7       	in	r29, 0x3e	; 62
 708:	2e 97       	sbiw	r28, 0x0e	; 14
 70a:	0f b6       	in	r0, 0x3f	; 63
 70c:	f8 94       	cli
 70e:	de bf       	out	0x3e, r29	; 62
 710:	0f be       	out	0x3f, r0	; 63
 712:	cd bf       	out	0x3d, r28	; 61
 714:	0e 89       	ldd	r16, Y+22	; 0x16
 716:	1f 89       	ldd	r17, Y+23	; 0x17
 718:	86 e0       	ldi	r24, 0x06	; 6
 71a:	8c 83       	std	Y+4, r24	; 0x04
 71c:	1a 83       	std	Y+2, r17	; 0x02
 71e:	09 83       	std	Y+1, r16	; 0x01
 720:	8f ef       	ldi	r24, 0xFF	; 255
 722:	9f e7       	ldi	r25, 0x7F	; 127
 724:	9e 83       	std	Y+6, r25	; 0x06
 726:	8d 83       	std	Y+5, r24	; 0x05
 728:	ae 01       	movw	r20, r28
 72a:	46 5e       	subi	r20, 0xE6	; 230
 72c:	5f 4f       	sbci	r21, 0xFF	; 255
 72e:	68 8d       	ldd	r22, Y+24	; 0x18
 730:	79 8d       	ldd	r23, Y+25	; 0x19
 732:	ce 01       	movw	r24, r28
 734:	01 96       	adiw	r24, 0x01	; 1
 736:	10 d0       	rcall	.+32     	; 0x758 <vfprintf>
 738:	ef 81       	ldd	r30, Y+7	; 0x07
 73a:	f8 85       	ldd	r31, Y+8	; 0x08
 73c:	e0 0f       	add	r30, r16
 73e:	f1 1f       	adc	r31, r17
 740:	10 82       	st	Z, r1
 742:	2e 96       	adiw	r28, 0x0e	; 14
 744:	0f b6       	in	r0, 0x3f	; 63
 746:	f8 94       	cli
 748:	de bf       	out	0x3e, r29	; 62
 74a:	0f be       	out	0x3f, r0	; 63
 74c:	cd bf       	out	0x3d, r28	; 61
 74e:	df 91       	pop	r29
 750:	cf 91       	pop	r28
 752:	1f 91       	pop	r17
 754:	0f 91       	pop	r16
 756:	08 95       	ret

00000758 <vfprintf>:
 758:	2f 92       	push	r2
 75a:	3f 92       	push	r3
 75c:	4f 92       	push	r4
 75e:	5f 92       	push	r5
 760:	6f 92       	push	r6
 762:	7f 92       	push	r7
 764:	8f 92       	push	r8
 766:	9f 92       	push	r9
 768:	af 92       	push	r10
 76a:	bf 92       	push	r11
 76c:	cf 92       	push	r12
 76e:	df 92       	push	r13
 770:	ef 92       	push	r14
 772:	ff 92       	push	r15
 774:	0f 93       	push	r16
 776:	1f 93       	push	r17
 778:	cf 93       	push	r28
 77a:	df 93       	push	r29
 77c:	cd b7       	in	r28, 0x3d	; 61
 77e:	de b7       	in	r29, 0x3e	; 62
 780:	2b 97       	sbiw	r28, 0x0b	; 11
 782:	0f b6       	in	r0, 0x3f	; 63
 784:	f8 94       	cli
 786:	de bf       	out	0x3e, r29	; 62
 788:	0f be       	out	0x3f, r0	; 63
 78a:	cd bf       	out	0x3d, r28	; 61
 78c:	6c 01       	movw	r12, r24
 78e:	7b 01       	movw	r14, r22
 790:	8a 01       	movw	r16, r20
 792:	fc 01       	movw	r30, r24
 794:	17 82       	std	Z+7, r1	; 0x07
 796:	16 82       	std	Z+6, r1	; 0x06
 798:	83 81       	ldd	r24, Z+3	; 0x03
 79a:	81 ff       	sbrs	r24, 1
 79c:	bf c1       	rjmp	.+894    	; 0xb1c <vfprintf+0x3c4>
 79e:	ce 01       	movw	r24, r28
 7a0:	01 96       	adiw	r24, 0x01	; 1
 7a2:	3c 01       	movw	r6, r24
 7a4:	f6 01       	movw	r30, r12
 7a6:	93 81       	ldd	r25, Z+3	; 0x03
 7a8:	f7 01       	movw	r30, r14
 7aa:	93 fd       	sbrc	r25, 3
 7ac:	85 91       	lpm	r24, Z+
 7ae:	93 ff       	sbrs	r25, 3
 7b0:	81 91       	ld	r24, Z+
 7b2:	7f 01       	movw	r14, r30
 7b4:	88 23       	and	r24, r24
 7b6:	09 f4       	brne	.+2      	; 0x7ba <vfprintf+0x62>
 7b8:	ad c1       	rjmp	.+858    	; 0xb14 <vfprintf+0x3bc>
 7ba:	85 32       	cpi	r24, 0x25	; 37
 7bc:	39 f4       	brne	.+14     	; 0x7cc <vfprintf+0x74>
 7be:	93 fd       	sbrc	r25, 3
 7c0:	85 91       	lpm	r24, Z+
 7c2:	93 ff       	sbrs	r25, 3
 7c4:	81 91       	ld	r24, Z+
 7c6:	7f 01       	movw	r14, r30
 7c8:	85 32       	cpi	r24, 0x25	; 37
 7ca:	21 f4       	brne	.+8      	; 0x7d4 <vfprintf+0x7c>
 7cc:	b6 01       	movw	r22, r12
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	d6 d1       	rcall	.+940    	; 0xb7e <fputc>
 7d2:	e8 cf       	rjmp	.-48     	; 0x7a4 <vfprintf+0x4c>
 7d4:	91 2c       	mov	r9, r1
 7d6:	21 2c       	mov	r2, r1
 7d8:	31 2c       	mov	r3, r1
 7da:	ff e1       	ldi	r31, 0x1F	; 31
 7dc:	f3 15       	cp	r31, r3
 7de:	d8 f0       	brcs	.+54     	; 0x816 <vfprintf+0xbe>
 7e0:	8b 32       	cpi	r24, 0x2B	; 43
 7e2:	79 f0       	breq	.+30     	; 0x802 <vfprintf+0xaa>
 7e4:	38 f4       	brcc	.+14     	; 0x7f4 <vfprintf+0x9c>
 7e6:	80 32       	cpi	r24, 0x20	; 32
 7e8:	79 f0       	breq	.+30     	; 0x808 <vfprintf+0xb0>
 7ea:	83 32       	cpi	r24, 0x23	; 35
 7ec:	a1 f4       	brne	.+40     	; 0x816 <vfprintf+0xbe>
 7ee:	23 2d       	mov	r18, r3
 7f0:	20 61       	ori	r18, 0x10	; 16
 7f2:	1d c0       	rjmp	.+58     	; 0x82e <vfprintf+0xd6>
 7f4:	8d 32       	cpi	r24, 0x2D	; 45
 7f6:	61 f0       	breq	.+24     	; 0x810 <vfprintf+0xb8>
 7f8:	80 33       	cpi	r24, 0x30	; 48
 7fa:	69 f4       	brne	.+26     	; 0x816 <vfprintf+0xbe>
 7fc:	23 2d       	mov	r18, r3
 7fe:	21 60       	ori	r18, 0x01	; 1
 800:	16 c0       	rjmp	.+44     	; 0x82e <vfprintf+0xd6>
 802:	83 2d       	mov	r24, r3
 804:	82 60       	ori	r24, 0x02	; 2
 806:	38 2e       	mov	r3, r24
 808:	e3 2d       	mov	r30, r3
 80a:	e4 60       	ori	r30, 0x04	; 4
 80c:	3e 2e       	mov	r3, r30
 80e:	2a c0       	rjmp	.+84     	; 0x864 <vfprintf+0x10c>
 810:	f3 2d       	mov	r31, r3
 812:	f8 60       	ori	r31, 0x08	; 8
 814:	1d c0       	rjmp	.+58     	; 0x850 <vfprintf+0xf8>
 816:	37 fc       	sbrc	r3, 7
 818:	2d c0       	rjmp	.+90     	; 0x874 <vfprintf+0x11c>
 81a:	20 ed       	ldi	r18, 0xD0	; 208
 81c:	28 0f       	add	r18, r24
 81e:	2a 30       	cpi	r18, 0x0A	; 10
 820:	40 f0       	brcs	.+16     	; 0x832 <vfprintf+0xda>
 822:	8e 32       	cpi	r24, 0x2E	; 46
 824:	b9 f4       	brne	.+46     	; 0x854 <vfprintf+0xfc>
 826:	36 fc       	sbrc	r3, 6
 828:	75 c1       	rjmp	.+746    	; 0xb14 <vfprintf+0x3bc>
 82a:	23 2d       	mov	r18, r3
 82c:	20 64       	ori	r18, 0x40	; 64
 82e:	32 2e       	mov	r3, r18
 830:	19 c0       	rjmp	.+50     	; 0x864 <vfprintf+0x10c>
 832:	36 fe       	sbrs	r3, 6
 834:	06 c0       	rjmp	.+12     	; 0x842 <vfprintf+0xea>
 836:	8a e0       	ldi	r24, 0x0A	; 10
 838:	98 9e       	mul	r9, r24
 83a:	20 0d       	add	r18, r0
 83c:	11 24       	eor	r1, r1
 83e:	92 2e       	mov	r9, r18
 840:	11 c0       	rjmp	.+34     	; 0x864 <vfprintf+0x10c>
 842:	ea e0       	ldi	r30, 0x0A	; 10
 844:	2e 9e       	mul	r2, r30
 846:	20 0d       	add	r18, r0
 848:	11 24       	eor	r1, r1
 84a:	22 2e       	mov	r2, r18
 84c:	f3 2d       	mov	r31, r3
 84e:	f0 62       	ori	r31, 0x20	; 32
 850:	3f 2e       	mov	r3, r31
 852:	08 c0       	rjmp	.+16     	; 0x864 <vfprintf+0x10c>
 854:	8c 36       	cpi	r24, 0x6C	; 108
 856:	21 f4       	brne	.+8      	; 0x860 <vfprintf+0x108>
 858:	83 2d       	mov	r24, r3
 85a:	80 68       	ori	r24, 0x80	; 128
 85c:	38 2e       	mov	r3, r24
 85e:	02 c0       	rjmp	.+4      	; 0x864 <vfprintf+0x10c>
 860:	88 36       	cpi	r24, 0x68	; 104
 862:	41 f4       	brne	.+16     	; 0x874 <vfprintf+0x11c>
 864:	f7 01       	movw	r30, r14
 866:	93 fd       	sbrc	r25, 3
 868:	85 91       	lpm	r24, Z+
 86a:	93 ff       	sbrs	r25, 3
 86c:	81 91       	ld	r24, Z+
 86e:	7f 01       	movw	r14, r30
 870:	81 11       	cpse	r24, r1
 872:	b3 cf       	rjmp	.-154    	; 0x7da <vfprintf+0x82>
 874:	98 2f       	mov	r25, r24
 876:	9f 7d       	andi	r25, 0xDF	; 223
 878:	95 54       	subi	r25, 0x45	; 69
 87a:	93 30       	cpi	r25, 0x03	; 3
 87c:	28 f4       	brcc	.+10     	; 0x888 <vfprintf+0x130>
 87e:	0c 5f       	subi	r16, 0xFC	; 252
 880:	1f 4f       	sbci	r17, 0xFF	; 255
 882:	9f e3       	ldi	r25, 0x3F	; 63
 884:	99 83       	std	Y+1, r25	; 0x01
 886:	0d c0       	rjmp	.+26     	; 0x8a2 <vfprintf+0x14a>
 888:	83 36       	cpi	r24, 0x63	; 99
 88a:	31 f0       	breq	.+12     	; 0x898 <vfprintf+0x140>
 88c:	83 37       	cpi	r24, 0x73	; 115
 88e:	71 f0       	breq	.+28     	; 0x8ac <vfprintf+0x154>
 890:	83 35       	cpi	r24, 0x53	; 83
 892:	09 f0       	breq	.+2      	; 0x896 <vfprintf+0x13e>
 894:	55 c0       	rjmp	.+170    	; 0x940 <vfprintf+0x1e8>
 896:	20 c0       	rjmp	.+64     	; 0x8d8 <vfprintf+0x180>
 898:	f8 01       	movw	r30, r16
 89a:	80 81       	ld	r24, Z
 89c:	89 83       	std	Y+1, r24	; 0x01
 89e:	0e 5f       	subi	r16, 0xFE	; 254
 8a0:	1f 4f       	sbci	r17, 0xFF	; 255
 8a2:	88 24       	eor	r8, r8
 8a4:	83 94       	inc	r8
 8a6:	91 2c       	mov	r9, r1
 8a8:	53 01       	movw	r10, r6
 8aa:	12 c0       	rjmp	.+36     	; 0x8d0 <vfprintf+0x178>
 8ac:	28 01       	movw	r4, r16
 8ae:	f2 e0       	ldi	r31, 0x02	; 2
 8b0:	4f 0e       	add	r4, r31
 8b2:	51 1c       	adc	r5, r1
 8b4:	f8 01       	movw	r30, r16
 8b6:	a0 80       	ld	r10, Z
 8b8:	b1 80       	ldd	r11, Z+1	; 0x01
 8ba:	36 fe       	sbrs	r3, 6
 8bc:	03 c0       	rjmp	.+6      	; 0x8c4 <vfprintf+0x16c>
 8be:	69 2d       	mov	r22, r9
 8c0:	70 e0       	ldi	r23, 0x00	; 0
 8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <vfprintf+0x170>
 8c4:	6f ef       	ldi	r22, 0xFF	; 255
 8c6:	7f ef       	ldi	r23, 0xFF	; 255
 8c8:	c5 01       	movw	r24, r10
 8ca:	4e d1       	rcall	.+668    	; 0xb68 <strnlen>
 8cc:	4c 01       	movw	r8, r24
 8ce:	82 01       	movw	r16, r4
 8d0:	f3 2d       	mov	r31, r3
 8d2:	ff 77       	andi	r31, 0x7F	; 127
 8d4:	3f 2e       	mov	r3, r31
 8d6:	15 c0       	rjmp	.+42     	; 0x902 <vfprintf+0x1aa>
 8d8:	28 01       	movw	r4, r16
 8da:	22 e0       	ldi	r18, 0x02	; 2
 8dc:	42 0e       	add	r4, r18
 8de:	51 1c       	adc	r5, r1
 8e0:	f8 01       	movw	r30, r16
 8e2:	a0 80       	ld	r10, Z
 8e4:	b1 80       	ldd	r11, Z+1	; 0x01
 8e6:	36 fe       	sbrs	r3, 6
 8e8:	03 c0       	rjmp	.+6      	; 0x8f0 <vfprintf+0x198>
 8ea:	69 2d       	mov	r22, r9
 8ec:	70 e0       	ldi	r23, 0x00	; 0
 8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <vfprintf+0x19c>
 8f0:	6f ef       	ldi	r22, 0xFF	; 255
 8f2:	7f ef       	ldi	r23, 0xFF	; 255
 8f4:	c5 01       	movw	r24, r10
 8f6:	2d d1       	rcall	.+602    	; 0xb52 <strnlen_P>
 8f8:	4c 01       	movw	r8, r24
 8fa:	f3 2d       	mov	r31, r3
 8fc:	f0 68       	ori	r31, 0x80	; 128
 8fe:	3f 2e       	mov	r3, r31
 900:	82 01       	movw	r16, r4
 902:	33 fc       	sbrc	r3, 3
 904:	19 c0       	rjmp	.+50     	; 0x938 <vfprintf+0x1e0>
 906:	82 2d       	mov	r24, r2
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	88 16       	cp	r8, r24
 90c:	99 06       	cpc	r9, r25
 90e:	a0 f4       	brcc	.+40     	; 0x938 <vfprintf+0x1e0>
 910:	b6 01       	movw	r22, r12
 912:	80 e2       	ldi	r24, 0x20	; 32
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	33 d1       	rcall	.+614    	; 0xb7e <fputc>
 918:	2a 94       	dec	r2
 91a:	f5 cf       	rjmp	.-22     	; 0x906 <vfprintf+0x1ae>
 91c:	f5 01       	movw	r30, r10
 91e:	37 fc       	sbrc	r3, 7
 920:	85 91       	lpm	r24, Z+
 922:	37 fe       	sbrs	r3, 7
 924:	81 91       	ld	r24, Z+
 926:	5f 01       	movw	r10, r30
 928:	b6 01       	movw	r22, r12
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	28 d1       	rcall	.+592    	; 0xb7e <fputc>
 92e:	21 10       	cpse	r2, r1
 930:	2a 94       	dec	r2
 932:	21 e0       	ldi	r18, 0x01	; 1
 934:	82 1a       	sub	r8, r18
 936:	91 08       	sbc	r9, r1
 938:	81 14       	cp	r8, r1
 93a:	91 04       	cpc	r9, r1
 93c:	79 f7       	brne	.-34     	; 0x91c <vfprintf+0x1c4>
 93e:	e1 c0       	rjmp	.+450    	; 0xb02 <vfprintf+0x3aa>
 940:	84 36       	cpi	r24, 0x64	; 100
 942:	11 f0       	breq	.+4      	; 0x948 <vfprintf+0x1f0>
 944:	89 36       	cpi	r24, 0x69	; 105
 946:	39 f5       	brne	.+78     	; 0x996 <vfprintf+0x23e>
 948:	f8 01       	movw	r30, r16
 94a:	37 fe       	sbrs	r3, 7
 94c:	07 c0       	rjmp	.+14     	; 0x95c <vfprintf+0x204>
 94e:	60 81       	ld	r22, Z
 950:	71 81       	ldd	r23, Z+1	; 0x01
 952:	82 81       	ldd	r24, Z+2	; 0x02
 954:	93 81       	ldd	r25, Z+3	; 0x03
 956:	0c 5f       	subi	r16, 0xFC	; 252
 958:	1f 4f       	sbci	r17, 0xFF	; 255
 95a:	08 c0       	rjmp	.+16     	; 0x96c <vfprintf+0x214>
 95c:	60 81       	ld	r22, Z
 95e:	71 81       	ldd	r23, Z+1	; 0x01
 960:	07 2e       	mov	r0, r23
 962:	00 0c       	add	r0, r0
 964:	88 0b       	sbc	r24, r24
 966:	99 0b       	sbc	r25, r25
 968:	0e 5f       	subi	r16, 0xFE	; 254
 96a:	1f 4f       	sbci	r17, 0xFF	; 255
 96c:	f3 2d       	mov	r31, r3
 96e:	ff 76       	andi	r31, 0x6F	; 111
 970:	3f 2e       	mov	r3, r31
 972:	97 ff       	sbrs	r25, 7
 974:	09 c0       	rjmp	.+18     	; 0x988 <vfprintf+0x230>
 976:	90 95       	com	r25
 978:	80 95       	com	r24
 97a:	70 95       	com	r23
 97c:	61 95       	neg	r22
 97e:	7f 4f       	sbci	r23, 0xFF	; 255
 980:	8f 4f       	sbci	r24, 0xFF	; 255
 982:	9f 4f       	sbci	r25, 0xFF	; 255
 984:	f0 68       	ori	r31, 0x80	; 128
 986:	3f 2e       	mov	r3, r31
 988:	2a e0       	ldi	r18, 0x0A	; 10
 98a:	30 e0       	ldi	r19, 0x00	; 0
 98c:	a3 01       	movw	r20, r6
 98e:	33 d1       	rcall	.+614    	; 0xbf6 <__ultoa_invert>
 990:	88 2e       	mov	r8, r24
 992:	86 18       	sub	r8, r6
 994:	44 c0       	rjmp	.+136    	; 0xa1e <vfprintf+0x2c6>
 996:	85 37       	cpi	r24, 0x75	; 117
 998:	31 f4       	brne	.+12     	; 0x9a6 <vfprintf+0x24e>
 99a:	23 2d       	mov	r18, r3
 99c:	2f 7e       	andi	r18, 0xEF	; 239
 99e:	b2 2e       	mov	r11, r18
 9a0:	2a e0       	ldi	r18, 0x0A	; 10
 9a2:	30 e0       	ldi	r19, 0x00	; 0
 9a4:	25 c0       	rjmp	.+74     	; 0x9f0 <vfprintf+0x298>
 9a6:	93 2d       	mov	r25, r3
 9a8:	99 7f       	andi	r25, 0xF9	; 249
 9aa:	b9 2e       	mov	r11, r25
 9ac:	8f 36       	cpi	r24, 0x6F	; 111
 9ae:	c1 f0       	breq	.+48     	; 0x9e0 <vfprintf+0x288>
 9b0:	18 f4       	brcc	.+6      	; 0x9b8 <vfprintf+0x260>
 9b2:	88 35       	cpi	r24, 0x58	; 88
 9b4:	79 f0       	breq	.+30     	; 0x9d4 <vfprintf+0x27c>
 9b6:	ae c0       	rjmp	.+348    	; 0xb14 <vfprintf+0x3bc>
 9b8:	80 37       	cpi	r24, 0x70	; 112
 9ba:	19 f0       	breq	.+6      	; 0x9c2 <vfprintf+0x26a>
 9bc:	88 37       	cpi	r24, 0x78	; 120
 9be:	21 f0       	breq	.+8      	; 0x9c8 <vfprintf+0x270>
 9c0:	a9 c0       	rjmp	.+338    	; 0xb14 <vfprintf+0x3bc>
 9c2:	e9 2f       	mov	r30, r25
 9c4:	e0 61       	ori	r30, 0x10	; 16
 9c6:	be 2e       	mov	r11, r30
 9c8:	b4 fe       	sbrs	r11, 4
 9ca:	0d c0       	rjmp	.+26     	; 0x9e6 <vfprintf+0x28e>
 9cc:	fb 2d       	mov	r31, r11
 9ce:	f4 60       	ori	r31, 0x04	; 4
 9d0:	bf 2e       	mov	r11, r31
 9d2:	09 c0       	rjmp	.+18     	; 0x9e6 <vfprintf+0x28e>
 9d4:	34 fe       	sbrs	r3, 4
 9d6:	0a c0       	rjmp	.+20     	; 0x9ec <vfprintf+0x294>
 9d8:	29 2f       	mov	r18, r25
 9da:	26 60       	ori	r18, 0x06	; 6
 9dc:	b2 2e       	mov	r11, r18
 9de:	06 c0       	rjmp	.+12     	; 0x9ec <vfprintf+0x294>
 9e0:	28 e0       	ldi	r18, 0x08	; 8
 9e2:	30 e0       	ldi	r19, 0x00	; 0
 9e4:	05 c0       	rjmp	.+10     	; 0x9f0 <vfprintf+0x298>
 9e6:	20 e1       	ldi	r18, 0x10	; 16
 9e8:	30 e0       	ldi	r19, 0x00	; 0
 9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <vfprintf+0x298>
 9ec:	20 e1       	ldi	r18, 0x10	; 16
 9ee:	32 e0       	ldi	r19, 0x02	; 2
 9f0:	f8 01       	movw	r30, r16
 9f2:	b7 fe       	sbrs	r11, 7
 9f4:	07 c0       	rjmp	.+14     	; 0xa04 <vfprintf+0x2ac>
 9f6:	60 81       	ld	r22, Z
 9f8:	71 81       	ldd	r23, Z+1	; 0x01
 9fa:	82 81       	ldd	r24, Z+2	; 0x02
 9fc:	93 81       	ldd	r25, Z+3	; 0x03
 9fe:	0c 5f       	subi	r16, 0xFC	; 252
 a00:	1f 4f       	sbci	r17, 0xFF	; 255
 a02:	06 c0       	rjmp	.+12     	; 0xa10 <vfprintf+0x2b8>
 a04:	60 81       	ld	r22, Z
 a06:	71 81       	ldd	r23, Z+1	; 0x01
 a08:	80 e0       	ldi	r24, 0x00	; 0
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	0e 5f       	subi	r16, 0xFE	; 254
 a0e:	1f 4f       	sbci	r17, 0xFF	; 255
 a10:	a3 01       	movw	r20, r6
 a12:	f1 d0       	rcall	.+482    	; 0xbf6 <__ultoa_invert>
 a14:	88 2e       	mov	r8, r24
 a16:	86 18       	sub	r8, r6
 a18:	fb 2d       	mov	r31, r11
 a1a:	ff 77       	andi	r31, 0x7F	; 127
 a1c:	3f 2e       	mov	r3, r31
 a1e:	36 fe       	sbrs	r3, 6
 a20:	0d c0       	rjmp	.+26     	; 0xa3c <vfprintf+0x2e4>
 a22:	23 2d       	mov	r18, r3
 a24:	2e 7f       	andi	r18, 0xFE	; 254
 a26:	a2 2e       	mov	r10, r18
 a28:	89 14       	cp	r8, r9
 a2a:	58 f4       	brcc	.+22     	; 0xa42 <vfprintf+0x2ea>
 a2c:	34 fe       	sbrs	r3, 4
 a2e:	0b c0       	rjmp	.+22     	; 0xa46 <vfprintf+0x2ee>
 a30:	32 fc       	sbrc	r3, 2
 a32:	09 c0       	rjmp	.+18     	; 0xa46 <vfprintf+0x2ee>
 a34:	83 2d       	mov	r24, r3
 a36:	8e 7e       	andi	r24, 0xEE	; 238
 a38:	a8 2e       	mov	r10, r24
 a3a:	05 c0       	rjmp	.+10     	; 0xa46 <vfprintf+0x2ee>
 a3c:	b8 2c       	mov	r11, r8
 a3e:	a3 2c       	mov	r10, r3
 a40:	03 c0       	rjmp	.+6      	; 0xa48 <vfprintf+0x2f0>
 a42:	b8 2c       	mov	r11, r8
 a44:	01 c0       	rjmp	.+2      	; 0xa48 <vfprintf+0x2f0>
 a46:	b9 2c       	mov	r11, r9
 a48:	a4 fe       	sbrs	r10, 4
 a4a:	0f c0       	rjmp	.+30     	; 0xa6a <vfprintf+0x312>
 a4c:	fe 01       	movw	r30, r28
 a4e:	e8 0d       	add	r30, r8
 a50:	f1 1d       	adc	r31, r1
 a52:	80 81       	ld	r24, Z
 a54:	80 33       	cpi	r24, 0x30	; 48
 a56:	21 f4       	brne	.+8      	; 0xa60 <vfprintf+0x308>
 a58:	9a 2d       	mov	r25, r10
 a5a:	99 7e       	andi	r25, 0xE9	; 233
 a5c:	a9 2e       	mov	r10, r25
 a5e:	09 c0       	rjmp	.+18     	; 0xa72 <vfprintf+0x31a>
 a60:	a2 fe       	sbrs	r10, 2
 a62:	06 c0       	rjmp	.+12     	; 0xa70 <vfprintf+0x318>
 a64:	b3 94       	inc	r11
 a66:	b3 94       	inc	r11
 a68:	04 c0       	rjmp	.+8      	; 0xa72 <vfprintf+0x31a>
 a6a:	8a 2d       	mov	r24, r10
 a6c:	86 78       	andi	r24, 0x86	; 134
 a6e:	09 f0       	breq	.+2      	; 0xa72 <vfprintf+0x31a>
 a70:	b3 94       	inc	r11
 a72:	a3 fc       	sbrc	r10, 3
 a74:	10 c0       	rjmp	.+32     	; 0xa96 <vfprintf+0x33e>
 a76:	a0 fe       	sbrs	r10, 0
 a78:	06 c0       	rjmp	.+12     	; 0xa86 <vfprintf+0x32e>
 a7a:	b2 14       	cp	r11, r2
 a7c:	80 f4       	brcc	.+32     	; 0xa9e <vfprintf+0x346>
 a7e:	28 0c       	add	r2, r8
 a80:	92 2c       	mov	r9, r2
 a82:	9b 18       	sub	r9, r11
 a84:	0d c0       	rjmp	.+26     	; 0xaa0 <vfprintf+0x348>
 a86:	b2 14       	cp	r11, r2
 a88:	58 f4       	brcc	.+22     	; 0xaa0 <vfprintf+0x348>
 a8a:	b6 01       	movw	r22, r12
 a8c:	80 e2       	ldi	r24, 0x20	; 32
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	76 d0       	rcall	.+236    	; 0xb7e <fputc>
 a92:	b3 94       	inc	r11
 a94:	f8 cf       	rjmp	.-16     	; 0xa86 <vfprintf+0x32e>
 a96:	b2 14       	cp	r11, r2
 a98:	18 f4       	brcc	.+6      	; 0xaa0 <vfprintf+0x348>
 a9a:	2b 18       	sub	r2, r11
 a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <vfprintf+0x34a>
 a9e:	98 2c       	mov	r9, r8
 aa0:	21 2c       	mov	r2, r1
 aa2:	a4 fe       	sbrs	r10, 4
 aa4:	0f c0       	rjmp	.+30     	; 0xac4 <vfprintf+0x36c>
 aa6:	b6 01       	movw	r22, r12
 aa8:	80 e3       	ldi	r24, 0x30	; 48
 aaa:	90 e0       	ldi	r25, 0x00	; 0
 aac:	68 d0       	rcall	.+208    	; 0xb7e <fputc>
 aae:	a2 fe       	sbrs	r10, 2
 ab0:	16 c0       	rjmp	.+44     	; 0xade <vfprintf+0x386>
 ab2:	a1 fc       	sbrc	r10, 1
 ab4:	03 c0       	rjmp	.+6      	; 0xabc <vfprintf+0x364>
 ab6:	88 e7       	ldi	r24, 0x78	; 120
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	02 c0       	rjmp	.+4      	; 0xac0 <vfprintf+0x368>
 abc:	88 e5       	ldi	r24, 0x58	; 88
 abe:	90 e0       	ldi	r25, 0x00	; 0
 ac0:	b6 01       	movw	r22, r12
 ac2:	0c c0       	rjmp	.+24     	; 0xadc <vfprintf+0x384>
 ac4:	8a 2d       	mov	r24, r10
 ac6:	86 78       	andi	r24, 0x86	; 134
 ac8:	51 f0       	breq	.+20     	; 0xade <vfprintf+0x386>
 aca:	a1 fe       	sbrs	r10, 1
 acc:	02 c0       	rjmp	.+4      	; 0xad2 <vfprintf+0x37a>
 ace:	8b e2       	ldi	r24, 0x2B	; 43
 ad0:	01 c0       	rjmp	.+2      	; 0xad4 <vfprintf+0x37c>
 ad2:	80 e2       	ldi	r24, 0x20	; 32
 ad4:	a7 fc       	sbrc	r10, 7
 ad6:	8d e2       	ldi	r24, 0x2D	; 45
 ad8:	b6 01       	movw	r22, r12
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	50 d0       	rcall	.+160    	; 0xb7e <fputc>
 ade:	89 14       	cp	r8, r9
 ae0:	30 f4       	brcc	.+12     	; 0xaee <vfprintf+0x396>
 ae2:	b6 01       	movw	r22, r12
 ae4:	80 e3       	ldi	r24, 0x30	; 48
 ae6:	90 e0       	ldi	r25, 0x00	; 0
 ae8:	4a d0       	rcall	.+148    	; 0xb7e <fputc>
 aea:	9a 94       	dec	r9
 aec:	f8 cf       	rjmp	.-16     	; 0xade <vfprintf+0x386>
 aee:	8a 94       	dec	r8
 af0:	f3 01       	movw	r30, r6
 af2:	e8 0d       	add	r30, r8
 af4:	f1 1d       	adc	r31, r1
 af6:	80 81       	ld	r24, Z
 af8:	b6 01       	movw	r22, r12
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	40 d0       	rcall	.+128    	; 0xb7e <fputc>
 afe:	81 10       	cpse	r8, r1
 b00:	f6 cf       	rjmp	.-20     	; 0xaee <vfprintf+0x396>
 b02:	22 20       	and	r2, r2
 b04:	09 f4       	brne	.+2      	; 0xb08 <vfprintf+0x3b0>
 b06:	4e ce       	rjmp	.-868    	; 0x7a4 <vfprintf+0x4c>
 b08:	b6 01       	movw	r22, r12
 b0a:	80 e2       	ldi	r24, 0x20	; 32
 b0c:	90 e0       	ldi	r25, 0x00	; 0
 b0e:	37 d0       	rcall	.+110    	; 0xb7e <fputc>
 b10:	2a 94       	dec	r2
 b12:	f7 cf       	rjmp	.-18     	; 0xb02 <vfprintf+0x3aa>
 b14:	f6 01       	movw	r30, r12
 b16:	86 81       	ldd	r24, Z+6	; 0x06
 b18:	97 81       	ldd	r25, Z+7	; 0x07
 b1a:	02 c0       	rjmp	.+4      	; 0xb20 <vfprintf+0x3c8>
 b1c:	8f ef       	ldi	r24, 0xFF	; 255
 b1e:	9f ef       	ldi	r25, 0xFF	; 255
 b20:	2b 96       	adiw	r28, 0x0b	; 11
 b22:	0f b6       	in	r0, 0x3f	; 63
 b24:	f8 94       	cli
 b26:	de bf       	out	0x3e, r29	; 62
 b28:	0f be       	out	0x3f, r0	; 63
 b2a:	cd bf       	out	0x3d, r28	; 61
 b2c:	df 91       	pop	r29
 b2e:	cf 91       	pop	r28
 b30:	1f 91       	pop	r17
 b32:	0f 91       	pop	r16
 b34:	ff 90       	pop	r15
 b36:	ef 90       	pop	r14
 b38:	df 90       	pop	r13
 b3a:	cf 90       	pop	r12
 b3c:	bf 90       	pop	r11
 b3e:	af 90       	pop	r10
 b40:	9f 90       	pop	r9
 b42:	8f 90       	pop	r8
 b44:	7f 90       	pop	r7
 b46:	6f 90       	pop	r6
 b48:	5f 90       	pop	r5
 b4a:	4f 90       	pop	r4
 b4c:	3f 90       	pop	r3
 b4e:	2f 90       	pop	r2
 b50:	08 95       	ret

00000b52 <strnlen_P>:
 b52:	fc 01       	movw	r30, r24
 b54:	05 90       	lpm	r0, Z+
 b56:	61 50       	subi	r22, 0x01	; 1
 b58:	70 40       	sbci	r23, 0x00	; 0
 b5a:	01 10       	cpse	r0, r1
 b5c:	d8 f7       	brcc	.-10     	; 0xb54 <strnlen_P+0x2>
 b5e:	80 95       	com	r24
 b60:	90 95       	com	r25
 b62:	8e 0f       	add	r24, r30
 b64:	9f 1f       	adc	r25, r31
 b66:	08 95       	ret

00000b68 <strnlen>:
 b68:	fc 01       	movw	r30, r24
 b6a:	61 50       	subi	r22, 0x01	; 1
 b6c:	70 40       	sbci	r23, 0x00	; 0
 b6e:	01 90       	ld	r0, Z+
 b70:	01 10       	cpse	r0, r1
 b72:	d8 f7       	brcc	.-10     	; 0xb6a <strnlen+0x2>
 b74:	80 95       	com	r24
 b76:	90 95       	com	r25
 b78:	8e 0f       	add	r24, r30
 b7a:	9f 1f       	adc	r25, r31
 b7c:	08 95       	ret

00000b7e <fputc>:
 b7e:	0f 93       	push	r16
 b80:	1f 93       	push	r17
 b82:	cf 93       	push	r28
 b84:	df 93       	push	r29
 b86:	fb 01       	movw	r30, r22
 b88:	23 81       	ldd	r18, Z+3	; 0x03
 b8a:	21 fd       	sbrc	r18, 1
 b8c:	03 c0       	rjmp	.+6      	; 0xb94 <fputc+0x16>
 b8e:	8f ef       	ldi	r24, 0xFF	; 255
 b90:	9f ef       	ldi	r25, 0xFF	; 255
 b92:	2c c0       	rjmp	.+88     	; 0xbec <fputc+0x6e>
 b94:	22 ff       	sbrs	r18, 2
 b96:	16 c0       	rjmp	.+44     	; 0xbc4 <fputc+0x46>
 b98:	46 81       	ldd	r20, Z+6	; 0x06
 b9a:	57 81       	ldd	r21, Z+7	; 0x07
 b9c:	24 81       	ldd	r18, Z+4	; 0x04
 b9e:	35 81       	ldd	r19, Z+5	; 0x05
 ba0:	42 17       	cp	r20, r18
 ba2:	53 07       	cpc	r21, r19
 ba4:	44 f4       	brge	.+16     	; 0xbb6 <fputc+0x38>
 ba6:	a0 81       	ld	r26, Z
 ba8:	b1 81       	ldd	r27, Z+1	; 0x01
 baa:	9d 01       	movw	r18, r26
 bac:	2f 5f       	subi	r18, 0xFF	; 255
 bae:	3f 4f       	sbci	r19, 0xFF	; 255
 bb0:	31 83       	std	Z+1, r19	; 0x01
 bb2:	20 83       	st	Z, r18
 bb4:	8c 93       	st	X, r24
 bb6:	26 81       	ldd	r18, Z+6	; 0x06
 bb8:	37 81       	ldd	r19, Z+7	; 0x07
 bba:	2f 5f       	subi	r18, 0xFF	; 255
 bbc:	3f 4f       	sbci	r19, 0xFF	; 255
 bbe:	37 83       	std	Z+7, r19	; 0x07
 bc0:	26 83       	std	Z+6, r18	; 0x06
 bc2:	14 c0       	rjmp	.+40     	; 0xbec <fputc+0x6e>
 bc4:	8b 01       	movw	r16, r22
 bc6:	ec 01       	movw	r28, r24
 bc8:	fb 01       	movw	r30, r22
 bca:	00 84       	ldd	r0, Z+8	; 0x08
 bcc:	f1 85       	ldd	r31, Z+9	; 0x09
 bce:	e0 2d       	mov	r30, r0
 bd0:	19 95       	eicall
 bd2:	89 2b       	or	r24, r25
 bd4:	e1 f6       	brne	.-72     	; 0xb8e <fputc+0x10>
 bd6:	d8 01       	movw	r26, r16
 bd8:	16 96       	adiw	r26, 0x06	; 6
 bda:	8d 91       	ld	r24, X+
 bdc:	9c 91       	ld	r25, X
 bde:	17 97       	sbiw	r26, 0x07	; 7
 be0:	01 96       	adiw	r24, 0x01	; 1
 be2:	17 96       	adiw	r26, 0x07	; 7
 be4:	9c 93       	st	X, r25
 be6:	8e 93       	st	-X, r24
 be8:	16 97       	sbiw	r26, 0x06	; 6
 bea:	ce 01       	movw	r24, r28
 bec:	df 91       	pop	r29
 bee:	cf 91       	pop	r28
 bf0:	1f 91       	pop	r17
 bf2:	0f 91       	pop	r16
 bf4:	08 95       	ret

00000bf6 <__ultoa_invert>:
 bf6:	fa 01       	movw	r30, r20
 bf8:	aa 27       	eor	r26, r26
 bfa:	28 30       	cpi	r18, 0x08	; 8
 bfc:	51 f1       	breq	.+84     	; 0xc52 <__ultoa_invert+0x5c>
 bfe:	20 31       	cpi	r18, 0x10	; 16
 c00:	81 f1       	breq	.+96     	; 0xc62 <__ultoa_invert+0x6c>
 c02:	e8 94       	clt
 c04:	6f 93       	push	r22
 c06:	6e 7f       	andi	r22, 0xFE	; 254
 c08:	6e 5f       	subi	r22, 0xFE	; 254
 c0a:	7f 4f       	sbci	r23, 0xFF	; 255
 c0c:	8f 4f       	sbci	r24, 0xFF	; 255
 c0e:	9f 4f       	sbci	r25, 0xFF	; 255
 c10:	af 4f       	sbci	r26, 0xFF	; 255
 c12:	b1 e0       	ldi	r27, 0x01	; 1
 c14:	3e d0       	rcall	.+124    	; 0xc92 <__ultoa_invert+0x9c>
 c16:	b4 e0       	ldi	r27, 0x04	; 4
 c18:	3c d0       	rcall	.+120    	; 0xc92 <__ultoa_invert+0x9c>
 c1a:	67 0f       	add	r22, r23
 c1c:	78 1f       	adc	r23, r24
 c1e:	89 1f       	adc	r24, r25
 c20:	9a 1f       	adc	r25, r26
 c22:	a1 1d       	adc	r26, r1
 c24:	68 0f       	add	r22, r24
 c26:	79 1f       	adc	r23, r25
 c28:	8a 1f       	adc	r24, r26
 c2a:	91 1d       	adc	r25, r1
 c2c:	a1 1d       	adc	r26, r1
 c2e:	6a 0f       	add	r22, r26
 c30:	71 1d       	adc	r23, r1
 c32:	81 1d       	adc	r24, r1
 c34:	91 1d       	adc	r25, r1
 c36:	a1 1d       	adc	r26, r1
 c38:	20 d0       	rcall	.+64     	; 0xc7a <__ultoa_invert+0x84>
 c3a:	09 f4       	brne	.+2      	; 0xc3e <__ultoa_invert+0x48>
 c3c:	68 94       	set
 c3e:	3f 91       	pop	r19
 c40:	2a e0       	ldi	r18, 0x0A	; 10
 c42:	26 9f       	mul	r18, r22
 c44:	11 24       	eor	r1, r1
 c46:	30 19       	sub	r19, r0
 c48:	30 5d       	subi	r19, 0xD0	; 208
 c4a:	31 93       	st	Z+, r19
 c4c:	de f6       	brtc	.-74     	; 0xc04 <__ultoa_invert+0xe>
 c4e:	cf 01       	movw	r24, r30
 c50:	08 95       	ret
 c52:	46 2f       	mov	r20, r22
 c54:	47 70       	andi	r20, 0x07	; 7
 c56:	40 5d       	subi	r20, 0xD0	; 208
 c58:	41 93       	st	Z+, r20
 c5a:	b3 e0       	ldi	r27, 0x03	; 3
 c5c:	0f d0       	rcall	.+30     	; 0xc7c <__ultoa_invert+0x86>
 c5e:	c9 f7       	brne	.-14     	; 0xc52 <__ultoa_invert+0x5c>
 c60:	f6 cf       	rjmp	.-20     	; 0xc4e <__ultoa_invert+0x58>
 c62:	46 2f       	mov	r20, r22
 c64:	4f 70       	andi	r20, 0x0F	; 15
 c66:	40 5d       	subi	r20, 0xD0	; 208
 c68:	4a 33       	cpi	r20, 0x3A	; 58
 c6a:	18 f0       	brcs	.+6      	; 0xc72 <__ultoa_invert+0x7c>
 c6c:	49 5d       	subi	r20, 0xD9	; 217
 c6e:	31 fd       	sbrc	r19, 1
 c70:	40 52       	subi	r20, 0x20	; 32
 c72:	41 93       	st	Z+, r20
 c74:	02 d0       	rcall	.+4      	; 0xc7a <__ultoa_invert+0x84>
 c76:	a9 f7       	brne	.-22     	; 0xc62 <__ultoa_invert+0x6c>
 c78:	ea cf       	rjmp	.-44     	; 0xc4e <__ultoa_invert+0x58>
 c7a:	b4 e0       	ldi	r27, 0x04	; 4
 c7c:	a6 95       	lsr	r26
 c7e:	97 95       	ror	r25
 c80:	87 95       	ror	r24
 c82:	77 95       	ror	r23
 c84:	67 95       	ror	r22
 c86:	ba 95       	dec	r27
 c88:	c9 f7       	brne	.-14     	; 0xc7c <__ultoa_invert+0x86>
 c8a:	00 97       	sbiw	r24, 0x00	; 0
 c8c:	61 05       	cpc	r22, r1
 c8e:	71 05       	cpc	r23, r1
 c90:	08 95       	ret
 c92:	9b 01       	movw	r18, r22
 c94:	ac 01       	movw	r20, r24
 c96:	0a 2e       	mov	r0, r26
 c98:	06 94       	lsr	r0
 c9a:	57 95       	ror	r21
 c9c:	47 95       	ror	r20
 c9e:	37 95       	ror	r19
 ca0:	27 95       	ror	r18
 ca2:	ba 95       	dec	r27
 ca4:	c9 f7       	brne	.-14     	; 0xc98 <__ultoa_invert+0xa2>
 ca6:	62 0f       	add	r22, r18
 ca8:	73 1f       	adc	r23, r19
 caa:	84 1f       	adc	r24, r20
 cac:	95 1f       	adc	r25, r21
 cae:	a0 1d       	adc	r26, r0
 cb0:	08 95       	ret

00000cb2 <_exit>:
 cb2:	f8 94       	cli

00000cb4 <__stop_program>:
 cb4:	ff cf       	rjmp	.-2      	; 0xcb4 <__stop_program>
